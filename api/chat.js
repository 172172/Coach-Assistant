 // F√∂rb√§ttrad Coach Assistant - Digital kollega f√∂r Linje65

import { getOpenAIResponse } from './memory.js';
import { searchKnowledge, q } from './db.js';

// PERSONLIGHET & KONTEXT
const COACH_PERSONALITY = {
  name: "Alex", // Din digitala kollega
  tone: "v√§nlig, uppmuntrande och lite rolig",
  traits: [
    "Anv√§nder mild humor f√∂r att g√∂ra l√§randet roligt",
    "K√§nner igen n√§r n√•gon beh√∂ver extra st√∂d",
    "Firar framsteg och uppmuntrar vid misslyckanden",
    "Anpassar spr√•ket efter anv√§ndarens erfarenhetsniv√•",
    "Kommer ih√•g vad vi pratat om tidigare"
  ]
};

// MINNESHANTERING
class ConversationMemory {
  constructor() {
    this.sessions = new Map(); // userId -> sessionData
  }

  getSession(userId) {
    if (!this.sessions.has(userId)) {
      this.sessions.set(userId, {
        personality: {
          preferredName: null,
          experienceLevel: 'beginner', // beginner, intermediate, expert
          learningStyle: null, // visual, hands-on, theoretical
          interests: [],
          lastActive: Date.now()
        },
        context: {
          recentTopics: [],
          currentTask: null,
          strugglingWith: [],
          masteredSkills: [],
          sessionGoals: []
        },
        interaction: {
          totalQuestions: 0,
          successfulTasks: 0,
          needsEncouragement: false,
          preferredResponseLength: 'medium' // short, medium, detailed
        }
      });
    }
    return this.sessions.get(userId);
  }

  updateSession(userId, updates) {
    const session = this.getSession(userId);
    Object.assign(session, updates);
    session.personality.lastActive = Date.now();
    return session;
  }

  addToHistory(userId, topic, success = true) {
    const session = this.getSession(userId);
    session.context.recentTopics.unshift(topic);
    if (session.context.recentTopics.length > 10) {
      session.context.recentTopics.pop();
    }
    
    if (success) {
      session.interaction.successfulTasks++;
    } else {
      session.interaction.needsEncouragement = true;
    }
  }
}

const memory = new ConversationMemory();

// ==================== PRAKTISKA FUNKTIONER ====================

// Normalisering och utilities
function normalize(text) {
  return text.toLowerCase()
    .replace(/[√•√§]/g, 'a')
    .replace(/[√∂]/g, 'o')
    .replace(/[^a-z0-9\s]/g, ' ')
    .replace(/\s+/g, ' ')
    .trim();
}

// Status/nyheter queries
function isStatusQuery(text) {
  const n = normalize(text);
  return /\b(vad.*har.*hant|status|laget|nyheter|happenings|uppdatering|overlam|idag|ig√•r|denna.*vecka|senaste.*veckan|i.*veckan)\b/i.test(n);
}

function parseStatusRange(text) {
  const n = normalize(text);
  if (/\b(idag|today)\b/.test(n)) return { key: "today", label: "idag" };
  if (/\b(igar|yesterday)\b/.test(n)) return { key: "yesterday", label: "ig√•r" };
  if (/\b(denna.*vecka|this.*week)\b/.test(n)) return { key: "week", label: "denna vecka" };
  if (/\b(senaste.*veckan|last.*week|forra.*veckan)\b/.test(n)) return { key: "last_week", label: "senaste veckan" };
  return { key: "week", label: "denna vecka" };
}

// H√§mta line_news f√∂r statusrapporter
async function fetchStatusData(rangeKey = "week") {
  let whereNews = "news_at >= now() - interval '7 days'";
  if (rangeKey === "today") {
    whereNews = "news_at >= date_trunc('day', now())";
  } else if (rangeKey === "yesterday") {
    whereNews = "news_at >= date_trunc('day', now()) - interval '1 day' AND news_at < date_trunc('day', now())";
  } else if (rangeKey === "last_week") {
    whereNews = "news_at >= date_trunc('week', now()) - interval '1 week' AND news_at < date_trunc('week', now())";
  }

  const newsSql = `
    select id, news_at, section, area, shift, title, body, tags
    from line_news
    where ${whereNews}
    order by news_at desc
    limit 300
  `;

  const n = await q(newsSql);
  return { news: n?.rows || [] };
}

// Normalisering av svar
function normalizeKeys(out) {
  if (out && !out.spoken && typeof out.svar === "string") out.spoken = out.svar;
  if (!out.need) out.need = { clarify: false, question: "" };
  if (!("clarify" in out.need)) out.need.clarify = false;
  if (!("question" in out.need)) out.need.question = "";
  if (!out.cards) out.cards = {};
  const defCards = { summary:"", steps:[], explanation:"", pitfalls:[], simple:"", pro:"", follow_up:"", coverage:0, matched_headings:[] };
  out.cards = Object.assign(defCards, out.cards);
  if (!Array.isArray(out.cards.steps)) out.cards.steps = [];
  if (!Array.isArray(out.cards.matched_headings)) out.cards.matched_headings = [];
  if (typeof out.cards.coverage !== "number" || isNaN(out.cards.coverage)) out.cards.coverage = 0;
  if (typeof out.follow_up !== "string") out.follow_up = out.cards.follow_up || "";
  
  // F√∂r status-svar: s√§kerst√§ll att bara spoken l√§ses upp
  if (out.meta?.speech_source === "status_summary") {
    out.meta.tts = Object.assign({}, out.meta.tts, {
      text: out.spoken,
      priority: "spoken_only",
      read_only_spoken: true,
      skip_steps: true,
      skip_cards: true,
      skip_all_except_spoken: true
    });
    out.tts_spoken_only = out.spoken;
    out.tts_skip_steps = true;
  }
  
  return out;
}

// AI-anrop via callLLM (f√∂r statusrapporter)
async function callLLM(system, user, temperature = 0.7, maxTokens = 800, history = []) {
  try {
    const fullPrompt = `${system}\n\nUser: ${user}\nAssistant:`;
    const response = await getOpenAIResponse(fullPrompt, temperature, maxTokens);
    
    try {
      return JSON.parse(response);
    } catch {
      return {
        spoken: response || "Jag hade lite tekniska problem med svaret.",
        cards: { summary: "Tekniskt fel" },
        follow_up: "Kan du f√∂rs√∂ka igen?"
      };
    }
  } catch (error) {
    console.error('callLLM error:', error);
    return {
      spoken: "Det blev ett tekniskt fel. Kan du prova igen?",
      cards: { summary: "Systemfel" },
      follow_up: "√Ñr det n√•got annat jag kan hj√§lpa dig med?"
    };
  }
}

// Bygg statusrapport (f√∂rb√§ttrad version)
async function buildStatusReply({ news = [], label = "senaste veckan", history = [], userSession }) {
  if (!news || news.length === 0) {
    const empty = {
      spoken: `Lugnt l√§ge ${label} ‚Äì inget s√§rskilt att rapportera! Ibland √§r det sk√∂nt n√§r allt bara rullar p√•. üòä`,
      need: { clarify: false, question: "" },
      cards: { summary: `Inget registrerat ${label}.`, steps: [], explanation: "", pitfalls: [], simple: "", pro: "", follow_up: "", coverage: 0, matched_headings: [] },
      follow_up: "Vill du att vi b√∂rjar logga vad som h√§nder?"
    };
    return normalizeKeys(empty);
  }

  // F√∂rb√§ttrad datumformatering med r√§tt veckodag
  const fmt = (d) => {
    const date = new Date(d);
    const weekdays = ['s√∂ndag', 'm√•ndag', 'tisdag', 'onsdag', 'torsdag', 'fredag', 'l√∂rdag'];
    const weekday = weekdays[date.getDay()];
    const dateStr = date.toLocaleDateString("sv-SE", { month: 'short', day: 'numeric' });
    const timeStr = date.toLocaleTimeString("sv-SE", { hour: '2-digit', minute: '2-digit' });
    return `${weekday} ${dateStr} kl ${timeStr}`;
  };
  
  const newsData = news.map(n => ({
    when: fmt(n.news_at),
    area: n.area || n.section || "Ok√§nt omr√•de",
    shift: n.shift || "",
    title: n.title || "",
    body: n.body || "",
    tags: Array.isArray(n.tags) ? n.tags : []
  }));

  // Personaliserad systemprompt baserat p√• anv√§ndarsession
  const userLevel = userSession?.personality?.experienceLevel || 'intermediate';
  const preferredLength = userSession?.interaction?.preferredResponseLength || 'medium';
  const userName = userSession?.personality?.preferredName ? `, ${userSession.personality.preferredName}` : '';

  const system = `
Du √§r Alex, en erfaren operat√∂r som ber√§ttar f√∂r en kollega${userName} vad som h√§nt ${label}.

ANV√ÑNDARENS PREFERENSER:
- Erfarenhetsniv√•: ${userLevel}
- F√∂redragen detaljniv√•: ${preferredLength}

STIL & TON:
- Vardagligt svenskt spr√•k, som mellan kollegor
- Anv√§nd "vi", "det", naturligt
- Omformulera slang till b√§ttre spr√•k men beh√•ll vardaglig ton
- Ber√§tta UTF√ñRLIGT och SPECIFIKT vad som h√§nt

VIKTIGT - OMFORMULERING AV SPR√ÖK:
- "allt gick √•t skogen" ‚Üí "det blev problem"
- "annat skit" ‚Üí "andra komponenter"
- "kr√•nglade" ‚Üí "hade problem"
- "strulade" ‚Üí "fungerade inte"

INNEH√ÖLL:
- B√∂rja med √∂vergripande l√§ge
- G√• in p√• specifika h√§ndelser per omr√•de/skift
- N√§mn alltid VILKET omr√•de och skift
- Inkludera relevanta tekniska detaljer

Returnera strikt JSON med v√•rt schema.`;

  const user = `
Omformulera och ber√§tta utf√∂rligt vad som h√§nt ${label}:

R√ÖDATA (${newsData.length} st):
${newsData.map(n => `${n.when} | ${n.area}${n.shift ? ` (Skift ${n.shift})` : ""} | ${n.title || "Uppdatering"}: ${n.body}`).join("\n")}

Omformulera ENDAST spr√•ket - l√§gg inte till information som inte finns. N√§mn alltid omr√•de och skift.`;

  let out = await callLLM(system, user, 0.2, 1000, history);
  out = normalizeKeys(out);

  // F√∂rb√§ttrad failsafe
  if (!out.spoken || out.spoken.trim().length < 20) {
    if (newsData.length === 1) {
      const item = newsData[0];
      let body = item.body || item.title || "";
      body = body.replace(/allt gick √•t skogen/gi, "det blev problem")
                 .replace(/annat skit/gi, "andra komponenter")
                 .replace(/kr√•nglade/gi, "hade problem")
                 .replace(/strulade/gi, "fungerade inte");
      
      const locationInfo = `${item.area}${item.shift ? ` under skift ${item.shift}` : ""}`;
      out.spoken = `${label}: Det h√§nde p√• ${locationInfo} - ${body}.`;
    } else {
      const areas = [...new Set(newsData.map(n => n.area))];
      out.spoken = `${newsData.length} h√§ndelser ${label} p√• ${areas.slice(0,2).join(" och ")}.`;
    }
  }

  // TTS-inst√§llningar f√∂r statusrapporter
  out.meta = Object.assign({}, out.meta, {
    speech: out.spoken,
    speech_source: "status_summary",
    speech_only: true,
    tts: { 
      text: out.spoken, 
      priority: "spoken_only",
      read_only_spoken: true,
      skip_steps: true,
      skip_cards: true,
      skip_all_except_spoken: true
    }
  });

  return out;
}

// DYNAMISK PROMPT GENERATION
function generateSystemPrompt(userSession, context = {}) {
  const { personality, interaction } = userSession;
  
  let prompt = `Du √§r Alex, en v√§nlig och kunnig digital kollega som jobbar p√• Linje65. 

PERSONLIGHET:
- Du √§r ${COACH_PERSONALITY.tone}
- Du anv√§nder mild humor och positiv energi f√∂r att g√∂ra l√§randet roligt
- Du kommer ih√•g tidigare samtal och bygger vidare p√• dem
- Du anpassar ditt spr√•k efter anv√§ndarens erfarenhetsniv√• (${personality.experienceLevel})

ANV√ÑNDARKONTEXT:
- Erfarenhetsniv√•: ${personality.experienceLevel}
- F√∂redragen svarsl√§ngd: ${interaction.preferredResponseLength}
- Antal lyckade uppgifter denna session: ${interaction.successfulTasks}
- Beh√∂ver uppmuntran: ${interaction.needsEncouragement ? 'Ja - var extra st√∂ttande!' : 'Nej'}`;

  if (personality.preferredName) {
    prompt += `\n- Anv√§ndarens namn: ${personality.preferredName}`;
  }

  if (userSession.context.recentTopics.length > 0) {
    prompt += `\n- Senaste √§mnen vi pratat om: ${userSession.context.recentTopics.slice(0, 3).join(', ')}`;
  }

  if (context.searchResults) {
    prompt += `\n\nTILLG√ÑNGLIG KUNSKAP:\n${context.searchResults}`;
  }

  prompt += `

SVARSSTIL:
- B√∂rja med personlig h√§lsning eller referens till tidigare samtal
- Anv√§nd "vi" ist√§llet f√∂r "du" f√∂r att skapa teamk√§nsla
- L√§gg till uppmuntrande kommentarer n√§r det passar
- Avsluta med en relevant uppf√∂ljningsfr√•ga eller f√∂rslag

EXEMPEL FRASER:
- "Kul att vi f√•r forts√§tta d√§r vi slutade!"
- "Du blir verkligen b√§ttre p√• det h√§r!"
- "L√•t oss ta det steg f√∂r steg tillsammans"
- "Bra fr√•ga! Det undrar m√•nga operat√∂rer √∂ver"

VIKTIGT: Du M√ÖSTE svara i giltigt JSON-format med exakt denna struktur:
{
  "spoken": "Vad du s√§ger h√∂gt (naturligt och personligt)",
  "cards": {
    "summary": "Kort sammanfattning",
    "steps": ["steg1", "steg2"],
    "pitfalls": ["fallgrop1"],
    "explanation": "Djupare f√∂rklaring vid behov",
    "matched_headings": ["k√§lla1"]
  },
  "follow_up": "F√∂rslag p√• n√§sta steg eller fr√•ga",
  "need": null,
  "meta": {
    "confidence": 0.9,
    "experience_needed": "${personality.experienceLevel}",
    "encouragement_added": ${interaction.needsEncouragement}
  }
}

Svara ENDAST med giltigt JSON, inget annat text.`;

  return prompt;
}

// INTELLIGENTA UPPF√ñLJNINGAR
function generateFollowUp(topic, userLevel, success) {
  const followUps = {
    beginner: {
      success: [
        "Vill du att vi g√•r igenom ett liknande scenario?",
        "K√§nner du dig redo att prova n√§sta niv√•?",
        "Finns det n√•got annat du undrar √∂ver inom det h√§r omr√•det?"
      ],
      struggle: [
        "Ska vi b√∂rja med grunderna ist√§llet?",
        "Vill du att jag f√∂rklarar det p√• ett annat s√§tt?",
        "Vilken del k√§nns mest f√∂rvirrande?"
      ]
    },
    intermediate: {
      success: [
        "Redo f√∂r en mer avancerad variant?",
        "Vill du l√§ra dig n√•gra pro-tips?",
        "Hur skulle du hantera det om X intr√§ffade?"
      ],
      struggle: [
        "L√•t oss bryta ner det i mindre delar",
        "Vilket steg k√§nns sv√•rast?",
        "Har du st√∂tt p√• det h√§r problemet tidigare?"
      ]
    },
    expert: {
      success: [
        "Intressant! Hur skulle du optimera processen?",
        "Vilka edge cases borde vi t√§nka p√•?",
        "Kan du se n√•gra f√∂rb√§ttringsm√∂jligheter?"
      ],
      struggle: [
        "Vill vi diskutera alternativa approaches?",
        "Vilka faktorer spelar in h√§r?",
        "Hur balanserar vi olika krav h√§r?"
      ]
    }
  };

  const level = followUps[userLevel] || followUps.beginner;
  const options = success ? level.success : level.struggle;
  return options[Math.floor(Math.random() * options.length)];
}

// HUVUD-ENDPOINT
export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { message, userId, history = [], prev } = req.body;
    
    if (!message?.trim()) {
      return res.status(400).json({ error: 'Message required' });
    }

    const userText = message.trim();

    // H√§mta/uppdatera anv√§ndarsession
    const userSession = memory.getSession(userId);
    userSession.interaction.totalQuestions++;

    // PERSONLIGHETSANALYS (enkla heuristiker) - bara f√∂rsta g√•ngerna
    if (userSession.interaction.totalQuestions <= 3) {
      if (/namn|heter|kallas/i.test(userText)) {
        const nameMatch = userText.match(/(?:namn|heter|kallas)\s+(\w+)/i);
        if (nameMatch) {
          userSession.personality.preferredName = nameMatch[1];
        }
      }
      
      if (/nyb√∂rjare|ny|b√∂rjat nyligen/i.test(userText)) {
        userSession.personality.experienceLevel = 'beginner';
      } else if (/erfaren|jobbat l√§nge|expert/i.test(userText)) {
        userSession.personality.experienceLevel = 'expert';
      }
      
      if (/kort|snabbt|bara svaret/i.test(userText)) {
        userSession.interaction.preferredResponseLength = 'short';
      } else if (/detaljer|f√∂rklara ordentligt|grundligt/i.test(userText)) {
        userSession.interaction.preferredResponseLength = 'detailed';
      }
    }

    // ========== HANTERA STATUSFR√ÖGOR ==========
    if (isStatusQuery(userText)) {
      const range = parseStatusRange(userText);
      const { news } = await fetchStatusData(range.key);
      const reply = await buildStatusReply({ 
        news, 
        label: range.label, 
        history,
        userSession 
      });

      // Uppdatera memory
      memory.addToHistory(userId, `status_${range.key}`, true);

      return res.status(200).json({ reply });
    }

    // ========== HANTERA VANLIGA FR√ÖGOR ==========
    
    // S√∂k kunskap i databasen
    const searchResults = await searchKnowledge(userText);
    
    // Generera personlig systemprompt
    const systemPrompt = generateSystemPrompt(userSession, { searchResults });
    
    // Skapa konversationshistorik med personlighet
    let conversationHistory = `${systemPrompt}\n\nKUNSKAP:\n${searchResults}\n\nKONVERSATION:\n`;
    
    // L√§gg till tidigare meddelanden med kontext
    history.slice(-6).forEach(h => {
      conversationHistory += `Anv√§ndare: ${h.user}\nAlex: ${JSON.stringify(h.assistant)}\n`;
    });
    
    conversationHistory += `Anv√§ndare: ${userText}\nAlex: `;

    // H√§mta AI-svar
    const response = await getOpenAIResponse(conversationHistory);
    
    let aiReply;
    try {
      aiReply = JSON.parse(response);
    } catch (e) {
      // Fallback om JSON parsning misslyckas
      aiReply = {
        spoken: response || "Urs√§kta, jag hade lite tekniska problem. Kan du upprepa fr√•gan?",
        cards: { summary: "Tekniskt fel uppstod" },
        follow_up: generateFollowUp("general", userSession.personality.experienceLevel, false),
        meta: { confidence: 0.1 }
      };
    }

    // L√§gg till intelligent uppf√∂ljning om den saknas
    if (!aiReply.follow_up) {
      const success = aiReply.meta?.confidence > 0.7;
      aiReply.follow_up = generateFollowUp(
        userText, 
        userSession.personality.experienceLevel, 
        success
      );
    }

    // L√§gg till personlig touch baserat p√• session
    if (userSession.personality.preferredName && Math.random() < 0.3) {
      aiReply.spoken = aiReply.spoken.replace(/^/, `${userSession.personality.preferredName}, `);
    }

    // Uppdatera session baserat p√• resultatet
    const topic = aiReply.cards?.summary || "generell fr√•ga";
    const success = aiReply.meta?.confidence > 0.7;
    memory.addToHistory(userId, topic, success);

    // Reset uppmuntran-flagga om vi gav ett bra svar
    if (success) {
      userSession.interaction.needsEncouragement = false;
    }

    // Normalisera svaret
    aiReply = normalizeKeys(aiReply);

    res.json({ reply: aiReply });

  } catch (error) {
    console.error('Chat error:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      reply: {
        spoken: "√Öh nej, jag fick lite tekniska problem! Men vi l√∂ser det h√§r tillsammans. Kan du prova igen?",
        cards: { summary: "Systemfel - prova igen" },
        follow_up: "√Ñr det n√•got annat jag kan hj√§lpa dig med medan jag fixar det h√§r?",
        meta: { confidence: 0.1 }
      }
    });
  }
};
